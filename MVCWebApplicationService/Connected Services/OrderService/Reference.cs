//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVCWebApplicationService.OrderService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OrderService.IOrder")]
    public interface IOrder {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrder/Message", ReplyAction="http://tempuri.org/IOrder/MessageResponse")]
        string Message();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrder/Message", ReplyAction="http://tempuri.org/IOrder/MessageResponse")]
        System.Threading.Tasks.Task<string> MessageAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrder/GetOrders", ReplyAction="http://tempuri.org/IOrder/GetOrdersResponse")]
        ApplicationService.DTOs.OrderDTO[] GetOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrder/GetOrders", ReplyAction="http://tempuri.org/IOrder/GetOrdersResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.OrderDTO[]> GetOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrder/GetOrderByID", ReplyAction="http://tempuri.org/IOrder/GetOrderByIDResponse")]
        ApplicationService.DTOs.OrderDTO GetOrderByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrder/GetOrderByID", ReplyAction="http://tempuri.org/IOrder/GetOrderByIDResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.OrderDTO> GetOrderByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrder/PostOrder", ReplyAction="http://tempuri.org/IOrder/PostOrderResponse")]
        string PostOrder(ApplicationService.DTOs.OrderDTO orderDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrder/PostOrder", ReplyAction="http://tempuri.org/IOrder/PostOrderResponse")]
        System.Threading.Tasks.Task<string> PostOrderAsync(ApplicationService.DTOs.OrderDTO orderDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrder/DeleteOrder", ReplyAction="http://tempuri.org/IOrder/DeleteOrderResponse")]
        string DeleteOrder(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrder/DeleteOrder", ReplyAction="http://tempuri.org/IOrder/DeleteOrderResponse")]
        System.Threading.Tasks.Task<string> DeleteOrderAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrderChannel : MVCWebApplicationService.OrderService.IOrder, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrderClient : System.ServiceModel.ClientBase<MVCWebApplicationService.OrderService.IOrder>, MVCWebApplicationService.OrderService.IOrder {
        
        public OrderClient() {
        }
        
        public OrderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OrderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Message() {
            return base.Channel.Message();
        }
        
        public System.Threading.Tasks.Task<string> MessageAsync() {
            return base.Channel.MessageAsync();
        }
        
        public ApplicationService.DTOs.OrderDTO[] GetOrders() {
            return base.Channel.GetOrders();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.OrderDTO[]> GetOrdersAsync() {
            return base.Channel.GetOrdersAsync();
        }
        
        public ApplicationService.DTOs.OrderDTO GetOrderByID(int id) {
            return base.Channel.GetOrderByID(id);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.OrderDTO> GetOrderByIDAsync(int id) {
            return base.Channel.GetOrderByIDAsync(id);
        }
        
        public string PostOrder(ApplicationService.DTOs.OrderDTO orderDTO) {
            return base.Channel.PostOrder(orderDTO);
        }
        
        public System.Threading.Tasks.Task<string> PostOrderAsync(ApplicationService.DTOs.OrderDTO orderDTO) {
            return base.Channel.PostOrderAsync(orderDTO);
        }
        
        public string DeleteOrder(int id) {
            return base.Channel.DeleteOrder(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteOrderAsync(int id) {
            return base.Channel.DeleteOrderAsync(id);
        }
    }
}
